//---
//ComponentName: {ComponentName}
//camelCaseComponentName: {camelCaseComponentName}
//ComponentChar: {ComponentChar}
//ComponentNamespace: {ComponentNamespace}
//ComponentType: {ComponentType}
//LibraryNamespace: {LibraryNamespace}
//---

namespace {LibraryNamespace}

open Dash.NET
open System
open Plotly.NET
open HTMLPropTypes

[<RequireQualifiedAccess>]
module {ComponentName} =

    type {ComponentName}() =
        inherit DashComponent()
        static member applyMembers
            (
                children : seq<DashComponent>,
                ?Id : string,
                ?ClassName : string,
                ?Style : DashComponentStyle
            ) =
            (
                fun ({ComponentChar}:{ComponentName}) -> 

                    let props = DashComponentProps()

                    children 
                    |> DashComponent.transformChildren
                    |> DynObj.setValue props "children"

                    Id |> DynObj.setValueOpt props "id"
                    ClassName |> DynObj.setValueOpt props "className"
                    Style |> DynObj.setValueOpt props "style"

                    DynObj.setValue {ComponentChar} "namespace" "{ComponentNamespace}"
                    DynObj.setValue {ComponentChar} "props" props
                    DynObj.setValue {ComponentChar} "type" "{ComponentType}"

                    {ComponentChar}

            )
        static member init 
            (
                children,
                ?Id,
                ?ClassName,
                ?Style
            ) = 
                {ComponentName}()
                |> {ComponentName}.applyMembers 
                    (
                        children,
                        ?Id = Id,
                        ?ClassName = ClassName,
                        ?Style = Style
                    )

    let {camelCaseComponentName} (props:seq<HTMLProps>) (children:seq<DashComponent>) =
        let {ComponentChar} = {ComponentName}.init(children)
        let componentProps = 
            match ({ComponentChar}.TryGetTypedValue<DashComponentProps>("props")) with
            | Some p -> p
            | None -> DashComponentProps()
        props
        |> Seq.iter (fun prop ->
            let fieldName,boxedProp = prop |> HTMLProps.toDynamicMemberDef
            boxedProp |> DynObj.setValue componentProps fieldName
        )
        componentProps |> DynObj.setValue {ComponentChar} "props" 
        {ComponentChar} :> DashComponent